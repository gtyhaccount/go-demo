1.go build:在当前文件夹生成一个可执行文件（前提是当前包有执行入口---包名main，方法名为main；如果不是，则不会产生任何文件。）;

2.go install 命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到 $GOPATH/pkg 或者 $GOPATH/bin。
            .exe文件： 一般是 go install 带main函数的go文件产生的，有函数入口，所有可以直接运行。
            .a应用包： 一般是 go install 不包含main函数的go文件产生的，没有函数入口，只能被调用（即本地的其它函数中可以在import中引用）。
			
3.go get: 获取远程包，可以理解为通过源码管理工具clone源码到GOPATH/src下，然后执行go install;支持github、googlecode、bitbucket等。
         ---当go get包时，会自动下载依赖包；
         --- “-u”参数可以自动更新包；		 

-----------------------------------------------------------------------------------------------------
1.导入的包，必须使用当中的方法或变量，否则变异不通过！

2.可见性规则（类似于public/private）：首字母大写的方法和变量可以在  所在包 被导入 后调用。小写则不能！

3.const: 声明常量
  var: 声明全局变量；不能用var加一个大括号的方式在方法内进行多个参数的声明（ := 可以在函数中声明变量）
  type: 声明普通类型,如：
  type { // 为系统类型添加别名
    newType int
	type1 floot32
	type2 string
  }
  
  var a int // 变量的声明
  a = 1 // 变量的赋值
  
  var a int = 1 // 声明类型的同时赋值
  
  var a = 1 // 由系统推断变量的类型（变量推断）
  
  a := 1 // 变量声明和赋值的最简写法
  
二.类型与变量
1.布尔型：bool
   长度：1字节
   取值范围：true/false
   注意：不能用数字代表true和false（其它语言可以数字和true、false隐式转换）

2.整型：int/uint
    -根据运行平台可能为32位或64位
  8位(bit)整型：int8- -128~127 （8位一字节,字节:byte）
           uint- 0~255 (无符号8位整形)  
  16位整形：int16- -(2^15)~(2^15-1) 2字节
            uint16- 0~(2^16-1)
  32位整形：int32（别名：rune）- -(2^31)~(2^31-1) 4字节
            uint32- 0~(2^32-1)
  16位整形：int64- -(2^63)~(2^63-1) 8字节
            uint64- 0~(2^64-1)			
  
  
3.字符型：byte （其实就是无符号的uint8。同时它也是byte的别名）		   

4.浮点型：float32/float64 (无double类型)		   
  精确位数：小数点后7位/小数点后15位
  
5.复数：complex64/complex128
        8字节/16字节

6.uintptr:足够保存指针的32位或64位整数型

7.其它类型：array
            struct
            string

8.引用类型：slice
            map
            chan

9.接口类型：interface

10.函数类型：func (Go中函数也可以赋值给变量，所以函数也是一种特殊的变量)			

11.零值类型：
       零值不代表空值，而是当变量被声明为某种类型后的默认值，比如bool为false;数值类型的为0；string类型的为空字符串。  

12.赋值忽略，如： a,b,_ := 1,2,3	  (那么这个3赋值的动作被忽略，这种写法的真正用途是在一个函数有多个返回值的时候)

13.类型转换：Go中不存在类型的隐式转换，必须声明类型的转换，所以Go是类型安全的语言。
           var a float32 = 100.1
		   b := int(a) // 会丢失精度
		   
三.常量与运算符
1.常量的定义：
  常量的值在编译期就已确定；
  常量的定义方式与变量基本相同，const关键字定义
  常量定义时等号右边必须是常量或者常量表达式（不能是一个变量，因为变量在编译期无法辨别），如：
      var a int = 1;
	  const b = a; // 会报错，因为在编译期，a还没有赋值
  常量表达式中的函数必须是内置函数（即导入包中的函数），否则在编译期是无法获取这个函数的运行结果的。
  

十一.方法method（Go中没有方法重载的概念）
  1.通过显示说明receiver来实现与某个类型的组合
  *2.只能为同一个包中的类型定义方法
  3.Receiver中可以是类型的值也可以是指针
  4.可以使用值或指针来调用方法，编译器会自动转换
  *5.如果外部结构和嵌套结构存在同名的方法，则优先调用外部的方法

十二.接口interface
  1.接口是一个或多个方法签名的集合
  2.只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显式声明实现了哪个接口，这称为Structural Typing
  3.接口只有方法声明，没有实现，没有数据字段
  4.接口可以嵌套其它接口，或嵌入结构中  
  5.将对象赋值给接口时，会发生拷贝，而接口内部存储的是指向这个复制品的指针，即无法修改复制品的状态，也无法获取指针
  6.只有当接口存储的类型和对象都为nil时，接口才等于nil
  7.接口调用不会做receiver的自动转换
  8.空接口可以作为任何类型数据的容器